Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    PROCEDURE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations BEGIN stmt_list END DOT
Rule 2     declarations -> VAR var_declarations
Rule 3     declarations -> empty
Rule 4     var_declarations -> var_declarations var_declaration
Rule 5     var_declarations -> var_declaration
Rule 6     var_declaration -> ID_list COLON ID SEMI
Rule 7     ID_list -> ID
Rule 8     ID_list -> ID_list COMMA ID
Rule 9     stmt_list -> stmt_list stmt
Rule 10    stmt_list -> stmt
Rule 11    stmt -> ID ASSIGN expr SEMI
Rule 12    stmt -> block
Rule 13    stmt -> WHILE expr DO stmt
Rule 14    stmt -> IF expr THEN stmt ELSE stmt
Rule 15    stmt -> IF expr THEN stmt
Rule 16    block -> BEGIN stmt_list END
Rule 17    expr -> expr PLUS term
Rule 18    expr -> expr MINUS term
Rule 19    expr -> expr LT term
Rule 20    expr -> expr GT term
Rule 21    expr -> expr LE term
Rule 22    expr -> expr GE term
Rule 23    expr -> expr EQ term
Rule 24    expr -> expr NEQ term
Rule 25    expr -> term
Rule 26    term -> term TIMES factor
Rule 27    term -> term DIVIDE factor
Rule 28    term -> factor
Rule 29    factor -> NUMBER
Rule 30    factor -> ID
Rule 31    factor -> LPAREN expr RPAREN
Rule 32    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 11
BEGIN                : 1 16
COLON                : 6
COMMA                : 8
DIVIDE               : 27
DO                   : 13
DOT                  : 1
ELSE                 : 14
END                  : 1 16
EQ                   : 23
FUNCTION             : 
GE                   : 22
GT                   : 20
ID                   : 1 6 7 8 11 30
IF                   : 14 15
LE                   : 21
LPAREN               : 31
LT                   : 19
MINUS                : 18
NEQ                  : 24
NUMBER               : 29
PLUS                 : 17
PROCEDURE            : 
PROGRAM              : 1
RPAREN               : 31
SEMI                 : 1 6 11
THEN                 : 14 15
TIMES                : 26
VAR                  : 2
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

ID_list              : 6 8
block                : 12
declarations         : 1
empty                : 3
expr                 : 11 13 14 15 17 18 19 20 21 22 23 24 31
factor               : 26 27 28
program              : 0
stmt                 : 9 10 13 14 14 15
stmt_list            : 1 9 16
term                 : 17 18 19 20 21 22 23 24 25 26 27
var_declaration      : 4 5
var_declarations     : 2 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations BEGIN stmt_list END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations BEGIN stmt_list END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations BEGIN stmt_list END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations BEGIN stmt_list END DOT
    (2) declarations -> . VAR var_declarations
    (3) declarations -> . empty
    (32) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 32 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . BEGIN stmt_list END DOT

    BEGIN           shift and go to state 8


state 6

    (2) declarations -> VAR . var_declarations
    (4) var_declarations -> . var_declarations var_declaration
    (5) var_declarations -> . var_declaration
    (6) var_declaration -> . ID_list COLON ID SEMI
    (7) ID_list -> . ID
    (8) ID_list -> . ID_list COMMA ID

    ID              shift and go to state 12

    var_declarations               shift and go to state 9
    var_declaration                shift and go to state 10
    ID_list                        shift and go to state 11

state 7

    (3) declarations -> empty .

    BEGIN           reduce using rule 3 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations BEGIN . stmt_list END DOT
    (9) stmt_list -> . stmt_list stmt
    (10) stmt_list -> . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt_list                      shift and go to state 15
    stmt                           shift and go to state 16
    block                          shift and go to state 17

state 9

    (2) declarations -> VAR var_declarations .
    (4) var_declarations -> var_declarations . var_declaration
    (6) var_declaration -> . ID_list COLON ID SEMI
    (7) ID_list -> . ID
    (8) ID_list -> . ID_list COMMA ID

    BEGIN           reduce using rule 2 (declarations -> VAR var_declarations .)
    ID              shift and go to state 12

    var_declaration                shift and go to state 20
    ID_list                        shift and go to state 11

state 10

    (5) var_declarations -> var_declaration .

    ID              reduce using rule 5 (var_declarations -> var_declaration .)
    BEGIN           reduce using rule 5 (var_declarations -> var_declaration .)


state 11

    (6) var_declaration -> ID_list . COLON ID SEMI
    (8) ID_list -> ID_list . COMMA ID

    COLON           shift and go to state 21
    COMMA           shift and go to state 22


state 12

    (7) ID_list -> ID .

    COLON           reduce using rule 7 (ID_list -> ID .)
    COMMA           reduce using rule 7 (ID_list -> ID .)


state 13

    (11) stmt -> ID . ASSIGN expr SEMI

    ASSIGN          shift and go to state 23


state 14

    (16) block -> BEGIN . stmt_list END
    (9) stmt_list -> . stmt_list stmt
    (10) stmt_list -> . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt_list                      shift and go to state 24
    stmt                           shift and go to state 16
    block                          shift and go to state 17

state 15

    (1) program -> PROGRAM ID SEMI declarations BEGIN stmt_list . END DOT
    (9) stmt_list -> stmt_list . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    END             shift and go to state 25
    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt                           shift and go to state 26
    block                          shift and go to state 17

state 16

    (10) stmt_list -> stmt .

    END             reduce using rule 10 (stmt_list -> stmt .)
    ID              reduce using rule 10 (stmt_list -> stmt .)
    WHILE           reduce using rule 10 (stmt_list -> stmt .)
    IF              reduce using rule 10 (stmt_list -> stmt .)
    BEGIN           reduce using rule 10 (stmt_list -> stmt .)


state 17

    (12) stmt -> block .

    END             reduce using rule 12 (stmt -> block .)
    ID              reduce using rule 12 (stmt -> block .)
    WHILE           reduce using rule 12 (stmt -> block .)
    IF              reduce using rule 12 (stmt -> block .)
    BEGIN           reduce using rule 12 (stmt -> block .)
    ELSE            reduce using rule 12 (stmt -> block .)


state 18

    (13) stmt -> WHILE . expr DO stmt
    (17) expr -> . expr PLUS term
    (18) expr -> . expr MINUS term
    (19) expr -> . expr LT term
    (20) expr -> . expr GT term
    (21) expr -> . expr LE term
    (22) expr -> . expr GE term
    (23) expr -> . expr EQ term
    (24) expr -> . expr NEQ term
    (25) expr -> . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    expr                           shift and go to state 27
    term                           shift and go to state 28
    factor                         shift and go to state 29

state 19

    (14) stmt -> IF . expr THEN stmt ELSE stmt
    (15) stmt -> IF . expr THEN stmt
    (17) expr -> . expr PLUS term
    (18) expr -> . expr MINUS term
    (19) expr -> . expr LT term
    (20) expr -> . expr GT term
    (21) expr -> . expr LE term
    (22) expr -> . expr GE term
    (23) expr -> . expr EQ term
    (24) expr -> . expr NEQ term
    (25) expr -> . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    expr                           shift and go to state 33
    term                           shift and go to state 28
    factor                         shift and go to state 29

state 20

    (4) var_declarations -> var_declarations var_declaration .

    ID              reduce using rule 4 (var_declarations -> var_declarations var_declaration .)
    BEGIN           reduce using rule 4 (var_declarations -> var_declarations var_declaration .)


state 21

    (6) var_declaration -> ID_list COLON . ID SEMI

    ID              shift and go to state 34


state 22

    (8) ID_list -> ID_list COMMA . ID

    ID              shift and go to state 35


state 23

    (11) stmt -> ID ASSIGN . expr SEMI
    (17) expr -> . expr PLUS term
    (18) expr -> . expr MINUS term
    (19) expr -> . expr LT term
    (20) expr -> . expr GT term
    (21) expr -> . expr LE term
    (22) expr -> . expr GE term
    (23) expr -> . expr EQ term
    (24) expr -> . expr NEQ term
    (25) expr -> . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    expr                           shift and go to state 36
    term                           shift and go to state 28
    factor                         shift and go to state 29

state 24

    (16) block -> BEGIN stmt_list . END
    (9) stmt_list -> stmt_list . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    END             shift and go to state 37
    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt                           shift and go to state 26
    block                          shift and go to state 17

state 25

    (1) program -> PROGRAM ID SEMI declarations BEGIN stmt_list END . DOT

    DOT             shift and go to state 38


state 26

    (9) stmt_list -> stmt_list stmt .

    END             reduce using rule 9 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 9 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 9 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 9 (stmt_list -> stmt_list stmt .)
    BEGIN           reduce using rule 9 (stmt_list -> stmt_list stmt .)


state 27

    (13) stmt -> WHILE expr . DO stmt
    (17) expr -> expr . PLUS term
    (18) expr -> expr . MINUS term
    (19) expr -> expr . LT term
    (20) expr -> expr . GT term
    (21) expr -> expr . LE term
    (22) expr -> expr . GE term
    (23) expr -> expr . EQ term
    (24) expr -> expr . NEQ term

    DO              shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 28

    (25) expr -> term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 25 (expr -> term .)
    PLUS            reduce using rule 25 (expr -> term .)
    MINUS           reduce using rule 25 (expr -> term .)
    LT              reduce using rule 25 (expr -> term .)
    GT              reduce using rule 25 (expr -> term .)
    LE              reduce using rule 25 (expr -> term .)
    GE              reduce using rule 25 (expr -> term .)
    EQ              reduce using rule 25 (expr -> term .)
    NEQ             reduce using rule 25 (expr -> term .)
    THEN            reduce using rule 25 (expr -> term .)
    SEMI            reduce using rule 25 (expr -> term .)
    RPAREN          reduce using rule 25 (expr -> term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 29

    (28) term -> factor .

    TIMES           reduce using rule 28 (term -> factor .)
    DIVIDE          reduce using rule 28 (term -> factor .)
    DO              reduce using rule 28 (term -> factor .)
    PLUS            reduce using rule 28 (term -> factor .)
    MINUS           reduce using rule 28 (term -> factor .)
    LT              reduce using rule 28 (term -> factor .)
    GT              reduce using rule 28 (term -> factor .)
    LE              reduce using rule 28 (term -> factor .)
    GE              reduce using rule 28 (term -> factor .)
    EQ              reduce using rule 28 (term -> factor .)
    NEQ             reduce using rule 28 (term -> factor .)
    THEN            reduce using rule 28 (term -> factor .)
    SEMI            reduce using rule 28 (term -> factor .)
    RPAREN          reduce using rule 28 (term -> factor .)


state 30

    (29) factor -> NUMBER .

    TIMES           reduce using rule 29 (factor -> NUMBER .)
    DIVIDE          reduce using rule 29 (factor -> NUMBER .)
    DO              reduce using rule 29 (factor -> NUMBER .)
    PLUS            reduce using rule 29 (factor -> NUMBER .)
    MINUS           reduce using rule 29 (factor -> NUMBER .)
    LT              reduce using rule 29 (factor -> NUMBER .)
    GT              reduce using rule 29 (factor -> NUMBER .)
    LE              reduce using rule 29 (factor -> NUMBER .)
    GE              reduce using rule 29 (factor -> NUMBER .)
    EQ              reduce using rule 29 (factor -> NUMBER .)
    NEQ             reduce using rule 29 (factor -> NUMBER .)
    THEN            reduce using rule 29 (factor -> NUMBER .)
    SEMI            reduce using rule 29 (factor -> NUMBER .)
    RPAREN          reduce using rule 29 (factor -> NUMBER .)


state 31

    (30) factor -> ID .

    TIMES           reduce using rule 30 (factor -> ID .)
    DIVIDE          reduce using rule 30 (factor -> ID .)
    DO              reduce using rule 30 (factor -> ID .)
    PLUS            reduce using rule 30 (factor -> ID .)
    MINUS           reduce using rule 30 (factor -> ID .)
    LT              reduce using rule 30 (factor -> ID .)
    GT              reduce using rule 30 (factor -> ID .)
    LE              reduce using rule 30 (factor -> ID .)
    GE              reduce using rule 30 (factor -> ID .)
    EQ              reduce using rule 30 (factor -> ID .)
    NEQ             reduce using rule 30 (factor -> ID .)
    THEN            reduce using rule 30 (factor -> ID .)
    SEMI            reduce using rule 30 (factor -> ID .)
    RPAREN          reduce using rule 30 (factor -> ID .)


state 32

    (31) factor -> LPAREN . expr RPAREN
    (17) expr -> . expr PLUS term
    (18) expr -> . expr MINUS term
    (19) expr -> . expr LT term
    (20) expr -> . expr GT term
    (21) expr -> . expr LE term
    (22) expr -> . expr GE term
    (23) expr -> . expr EQ term
    (24) expr -> . expr NEQ term
    (25) expr -> . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    expr                           shift and go to state 50
    term                           shift and go to state 28
    factor                         shift and go to state 29

state 33

    (14) stmt -> IF expr . THEN stmt ELSE stmt
    (15) stmt -> IF expr . THEN stmt
    (17) expr -> expr . PLUS term
    (18) expr -> expr . MINUS term
    (19) expr -> expr . LT term
    (20) expr -> expr . GT term
    (21) expr -> expr . LE term
    (22) expr -> expr . GE term
    (23) expr -> expr . EQ term
    (24) expr -> expr . NEQ term

    THEN            shift and go to state 51
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 34

    (6) var_declaration -> ID_list COLON ID . SEMI

    SEMI            shift and go to state 52


state 35

    (8) ID_list -> ID_list COMMA ID .

    COLON           reduce using rule 8 (ID_list -> ID_list COMMA ID .)
    COMMA           reduce using rule 8 (ID_list -> ID_list COMMA ID .)


state 36

    (11) stmt -> ID ASSIGN expr . SEMI
    (17) expr -> expr . PLUS term
    (18) expr -> expr . MINUS term
    (19) expr -> expr . LT term
    (20) expr -> expr . GT term
    (21) expr -> expr . LE term
    (22) expr -> expr . GE term
    (23) expr -> expr . EQ term
    (24) expr -> expr . NEQ term

    SEMI            shift and go to state 53
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 37

    (16) block -> BEGIN stmt_list END .

    END             reduce using rule 16 (block -> BEGIN stmt_list END .)
    ID              reduce using rule 16 (block -> BEGIN stmt_list END .)
    WHILE           reduce using rule 16 (block -> BEGIN stmt_list END .)
    IF              reduce using rule 16 (block -> BEGIN stmt_list END .)
    BEGIN           reduce using rule 16 (block -> BEGIN stmt_list END .)
    ELSE            reduce using rule 16 (block -> BEGIN stmt_list END .)


state 38

    (1) program -> PROGRAM ID SEMI declarations BEGIN stmt_list END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations BEGIN stmt_list END DOT .)


state 39

    (13) stmt -> WHILE expr DO . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt                           shift and go to state 54
    block                          shift and go to state 17

state 40

    (17) expr -> expr PLUS . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 55
    factor                         shift and go to state 29

state 41

    (18) expr -> expr MINUS . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 56
    factor                         shift and go to state 29

state 42

    (19) expr -> expr LT . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 57
    factor                         shift and go to state 29

state 43

    (20) expr -> expr GT . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 58
    factor                         shift and go to state 29

state 44

    (21) expr -> expr LE . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 59
    factor                         shift and go to state 29

state 45

    (22) expr -> expr GE . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 60
    factor                         shift and go to state 29

state 46

    (23) expr -> expr EQ . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 61
    factor                         shift and go to state 29

state 47

    (24) expr -> expr NEQ . term
    (26) term -> . term TIMES factor
    (27) term -> . term DIVIDE factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    term                           shift and go to state 62
    factor                         shift and go to state 29

state 48

    (26) term -> term TIMES . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    factor                         shift and go to state 63

state 49

    (27) term -> term DIVIDE . factor
    (29) factor -> . NUMBER
    (30) factor -> . ID
    (31) factor -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 30
    ID              shift and go to state 31
    LPAREN          shift and go to state 32

    factor                         shift and go to state 64

state 50

    (31) factor -> LPAREN expr . RPAREN
    (17) expr -> expr . PLUS term
    (18) expr -> expr . MINUS term
    (19) expr -> expr . LT term
    (20) expr -> expr . GT term
    (21) expr -> expr . LE term
    (22) expr -> expr . GE term
    (23) expr -> expr . EQ term
    (24) expr -> expr . NEQ term

    RPAREN          shift and go to state 65
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    LT              shift and go to state 42
    GT              shift and go to state 43
    LE              shift and go to state 44
    GE              shift and go to state 45
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 51

    (14) stmt -> IF expr THEN . stmt ELSE stmt
    (15) stmt -> IF expr THEN . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt                           shift and go to state 66
    block                          shift and go to state 17

state 52

    (6) var_declaration -> ID_list COLON ID SEMI .

    ID              reduce using rule 6 (var_declaration -> ID_list COLON ID SEMI .)
    BEGIN           reduce using rule 6 (var_declaration -> ID_list COLON ID SEMI .)


state 53

    (11) stmt -> ID ASSIGN expr SEMI .

    END             reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)
    ID              reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)
    WHILE           reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)
    IF              reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)
    BEGIN           reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)
    ELSE            reduce using rule 11 (stmt -> ID ASSIGN expr SEMI .)


state 54

    (13) stmt -> WHILE expr DO stmt .

    END             reduce using rule 13 (stmt -> WHILE expr DO stmt .)
    ID              reduce using rule 13 (stmt -> WHILE expr DO stmt .)
    WHILE           reduce using rule 13 (stmt -> WHILE expr DO stmt .)
    IF              reduce using rule 13 (stmt -> WHILE expr DO stmt .)
    BEGIN           reduce using rule 13 (stmt -> WHILE expr DO stmt .)
    ELSE            reduce using rule 13 (stmt -> WHILE expr DO stmt .)


state 55

    (17) expr -> expr PLUS term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 17 (expr -> expr PLUS term .)
    PLUS            reduce using rule 17 (expr -> expr PLUS term .)
    MINUS           reduce using rule 17 (expr -> expr PLUS term .)
    LT              reduce using rule 17 (expr -> expr PLUS term .)
    GT              reduce using rule 17 (expr -> expr PLUS term .)
    LE              reduce using rule 17 (expr -> expr PLUS term .)
    GE              reduce using rule 17 (expr -> expr PLUS term .)
    EQ              reduce using rule 17 (expr -> expr PLUS term .)
    NEQ             reduce using rule 17 (expr -> expr PLUS term .)
    THEN            reduce using rule 17 (expr -> expr PLUS term .)
    SEMI            reduce using rule 17 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 17 (expr -> expr PLUS term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 56

    (18) expr -> expr MINUS term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 18 (expr -> expr MINUS term .)
    PLUS            reduce using rule 18 (expr -> expr MINUS term .)
    MINUS           reduce using rule 18 (expr -> expr MINUS term .)
    LT              reduce using rule 18 (expr -> expr MINUS term .)
    GT              reduce using rule 18 (expr -> expr MINUS term .)
    LE              reduce using rule 18 (expr -> expr MINUS term .)
    GE              reduce using rule 18 (expr -> expr MINUS term .)
    EQ              reduce using rule 18 (expr -> expr MINUS term .)
    NEQ             reduce using rule 18 (expr -> expr MINUS term .)
    THEN            reduce using rule 18 (expr -> expr MINUS term .)
    SEMI            reduce using rule 18 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 18 (expr -> expr MINUS term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 57

    (19) expr -> expr LT term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 19 (expr -> expr LT term .)
    PLUS            reduce using rule 19 (expr -> expr LT term .)
    MINUS           reduce using rule 19 (expr -> expr LT term .)
    LT              reduce using rule 19 (expr -> expr LT term .)
    GT              reduce using rule 19 (expr -> expr LT term .)
    LE              reduce using rule 19 (expr -> expr LT term .)
    GE              reduce using rule 19 (expr -> expr LT term .)
    EQ              reduce using rule 19 (expr -> expr LT term .)
    NEQ             reduce using rule 19 (expr -> expr LT term .)
    THEN            reduce using rule 19 (expr -> expr LT term .)
    SEMI            reduce using rule 19 (expr -> expr LT term .)
    RPAREN          reduce using rule 19 (expr -> expr LT term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 58

    (20) expr -> expr GT term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 20 (expr -> expr GT term .)
    PLUS            reduce using rule 20 (expr -> expr GT term .)
    MINUS           reduce using rule 20 (expr -> expr GT term .)
    LT              reduce using rule 20 (expr -> expr GT term .)
    GT              reduce using rule 20 (expr -> expr GT term .)
    LE              reduce using rule 20 (expr -> expr GT term .)
    GE              reduce using rule 20 (expr -> expr GT term .)
    EQ              reduce using rule 20 (expr -> expr GT term .)
    NEQ             reduce using rule 20 (expr -> expr GT term .)
    THEN            reduce using rule 20 (expr -> expr GT term .)
    SEMI            reduce using rule 20 (expr -> expr GT term .)
    RPAREN          reduce using rule 20 (expr -> expr GT term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 59

    (21) expr -> expr LE term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 21 (expr -> expr LE term .)
    PLUS            reduce using rule 21 (expr -> expr LE term .)
    MINUS           reduce using rule 21 (expr -> expr LE term .)
    LT              reduce using rule 21 (expr -> expr LE term .)
    GT              reduce using rule 21 (expr -> expr LE term .)
    LE              reduce using rule 21 (expr -> expr LE term .)
    GE              reduce using rule 21 (expr -> expr LE term .)
    EQ              reduce using rule 21 (expr -> expr LE term .)
    NEQ             reduce using rule 21 (expr -> expr LE term .)
    THEN            reduce using rule 21 (expr -> expr LE term .)
    SEMI            reduce using rule 21 (expr -> expr LE term .)
    RPAREN          reduce using rule 21 (expr -> expr LE term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 60

    (22) expr -> expr GE term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 22 (expr -> expr GE term .)
    PLUS            reduce using rule 22 (expr -> expr GE term .)
    MINUS           reduce using rule 22 (expr -> expr GE term .)
    LT              reduce using rule 22 (expr -> expr GE term .)
    GT              reduce using rule 22 (expr -> expr GE term .)
    LE              reduce using rule 22 (expr -> expr GE term .)
    GE              reduce using rule 22 (expr -> expr GE term .)
    EQ              reduce using rule 22 (expr -> expr GE term .)
    NEQ             reduce using rule 22 (expr -> expr GE term .)
    THEN            reduce using rule 22 (expr -> expr GE term .)
    SEMI            reduce using rule 22 (expr -> expr GE term .)
    RPAREN          reduce using rule 22 (expr -> expr GE term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 61

    (23) expr -> expr EQ term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 23 (expr -> expr EQ term .)
    PLUS            reduce using rule 23 (expr -> expr EQ term .)
    MINUS           reduce using rule 23 (expr -> expr EQ term .)
    LT              reduce using rule 23 (expr -> expr EQ term .)
    GT              reduce using rule 23 (expr -> expr EQ term .)
    LE              reduce using rule 23 (expr -> expr EQ term .)
    GE              reduce using rule 23 (expr -> expr EQ term .)
    EQ              reduce using rule 23 (expr -> expr EQ term .)
    NEQ             reduce using rule 23 (expr -> expr EQ term .)
    THEN            reduce using rule 23 (expr -> expr EQ term .)
    SEMI            reduce using rule 23 (expr -> expr EQ term .)
    RPAREN          reduce using rule 23 (expr -> expr EQ term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 62

    (24) expr -> expr NEQ term .
    (26) term -> term . TIMES factor
    (27) term -> term . DIVIDE factor

    DO              reduce using rule 24 (expr -> expr NEQ term .)
    PLUS            reduce using rule 24 (expr -> expr NEQ term .)
    MINUS           reduce using rule 24 (expr -> expr NEQ term .)
    LT              reduce using rule 24 (expr -> expr NEQ term .)
    GT              reduce using rule 24 (expr -> expr NEQ term .)
    LE              reduce using rule 24 (expr -> expr NEQ term .)
    GE              reduce using rule 24 (expr -> expr NEQ term .)
    EQ              reduce using rule 24 (expr -> expr NEQ term .)
    NEQ             reduce using rule 24 (expr -> expr NEQ term .)
    THEN            reduce using rule 24 (expr -> expr NEQ term .)
    SEMI            reduce using rule 24 (expr -> expr NEQ term .)
    RPAREN          reduce using rule 24 (expr -> expr NEQ term .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 49


state 63

    (26) term -> term TIMES factor .

    TIMES           reduce using rule 26 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 26 (term -> term TIMES factor .)
    DO              reduce using rule 26 (term -> term TIMES factor .)
    PLUS            reduce using rule 26 (term -> term TIMES factor .)
    MINUS           reduce using rule 26 (term -> term TIMES factor .)
    LT              reduce using rule 26 (term -> term TIMES factor .)
    GT              reduce using rule 26 (term -> term TIMES factor .)
    LE              reduce using rule 26 (term -> term TIMES factor .)
    GE              reduce using rule 26 (term -> term TIMES factor .)
    EQ              reduce using rule 26 (term -> term TIMES factor .)
    NEQ             reduce using rule 26 (term -> term TIMES factor .)
    THEN            reduce using rule 26 (term -> term TIMES factor .)
    SEMI            reduce using rule 26 (term -> term TIMES factor .)
    RPAREN          reduce using rule 26 (term -> term TIMES factor .)


state 64

    (27) term -> term DIVIDE factor .

    TIMES           reduce using rule 27 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 27 (term -> term DIVIDE factor .)
    DO              reduce using rule 27 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 27 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 27 (term -> term DIVIDE factor .)
    LT              reduce using rule 27 (term -> term DIVIDE factor .)
    GT              reduce using rule 27 (term -> term DIVIDE factor .)
    LE              reduce using rule 27 (term -> term DIVIDE factor .)
    GE              reduce using rule 27 (term -> term DIVIDE factor .)
    EQ              reduce using rule 27 (term -> term DIVIDE factor .)
    NEQ             reduce using rule 27 (term -> term DIVIDE factor .)
    THEN            reduce using rule 27 (term -> term DIVIDE factor .)
    SEMI            reduce using rule 27 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 27 (term -> term DIVIDE factor .)


state 65

    (31) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    DO              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    LT              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    GT              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    LE              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    GE              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    EQ              reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    THEN            reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 31 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 31 (factor -> LPAREN expr RPAREN .)


state 66

    (14) stmt -> IF expr THEN stmt . ELSE stmt
    (15) stmt -> IF expr THEN stmt .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 67
    END             reduce using rule 15 (stmt -> IF expr THEN stmt .)
    ID              reduce using rule 15 (stmt -> IF expr THEN stmt .)
    WHILE           reduce using rule 15 (stmt -> IF expr THEN stmt .)
    IF              reduce using rule 15 (stmt -> IF expr THEN stmt .)
    BEGIN           reduce using rule 15 (stmt -> IF expr THEN stmt .)

  ! ELSE            [ reduce using rule 15 (stmt -> IF expr THEN stmt .) ]


state 67

    (14) stmt -> IF expr THEN stmt ELSE . stmt
    (11) stmt -> . ID ASSIGN expr SEMI
    (12) stmt -> . block
    (13) stmt -> . WHILE expr DO stmt
    (14) stmt -> . IF expr THEN stmt ELSE stmt
    (15) stmt -> . IF expr THEN stmt
    (16) block -> . BEGIN stmt_list END

    ID              shift and go to state 13
    WHILE           shift and go to state 18
    IF              shift and go to state 19
    BEGIN           shift and go to state 14

    stmt                           shift and go to state 68
    block                          shift and go to state 17

state 68

    (14) stmt -> IF expr THEN stmt ELSE stmt .

    END             reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)
    ID              reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)
    WHILE           reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)
    IF              reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)
    BEGIN           reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)
    ELSE            reduce using rule 14 (stmt -> IF expr THEN stmt ELSE stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 66 resolved as shift
